${class.package}

${class.imports}

final class ${class.name} implements ${interfaces.names} {

${multicaster.methods}

    private static Object addInternal(Object existingObject, Object objectToAdd) {
        if (existingObject == null) {
            return objectToAdd;
        }
        if (objectToAdd == null) {
            return existingObject;
        }
        return new ${class.name}(existingObject, objectToAdd);
    }

    private static Object removeInternal(Object existingObject, Object objectToRemove) {
        if (existingObject == objectToRemove || existingObject == null) {
            return null;
        }
        if (existingObject instanceof ${class.name}) {
            ${class.name} tuple = (${class.name}) existingObject;
            if (objectToRemove == tuple.a) {
                return tuple.b;
            }
            if (objectToRemove == tuple.b) {
                return tuple.a;
            }
            Object a = removeInternal(tuple.a, objectToRemove);
            Object b = removeInternal(tuple.b, objectToRemove);
            if (a == tuple.a && b == tuple.b) {
                return tuple;
            }
            return addInternal(a, b);
        }
        return existingObject;
    }

    private final Object a;
    private final Object b;

    private ${class.name}(Object a, Object b) {
        this.a = a;
        this.b = b;
    }

${interfaces.methods}
}