${class.package}

${class.imports}

final class ${class.name} implements ${listener.name} {

${multicaster.methods}

    private static Object addInternal(Object existingListener, Object listenerToAdd) {
        if (existingListener == null) {
            return listenerToAdd;
        }
        if (listenerToAdd == null) {
            return existingListener;
        }
        return new ${class.name}(existingListener, listenerToAdd);
    }

    private static Object removeInternal(Object existingListener, Object listenerToRemove) {
        if (existingListener == listenerToRemove || existingListener == null) {
            return null;
        }
        if (existingListener instanceof ${class.name}) {
            ${class.name} tuple = (${class.name}) existingListener;
            if (listenerToRemove == tuple.a) {
                return tuple.b;
            }
            if (listenerToRemove == tuple.b) {
                return tuple.a;
            }
            Object first = removeInternal(tuple.a, listenerToRemove);
            Object second = removeInternal(tuple.b, listenerToRemove);
            if (first == tuple.a && second == tuple.b) {
                return tuple;
            }
            return addInternal(first, second);
        }
        return existingListener;
    }

    private final Object a;
    private final Object b;

    private ${class.name}(Object a, Object b) {
        this.a = a;
        this.b = b;
    }

${listener.methods}
}